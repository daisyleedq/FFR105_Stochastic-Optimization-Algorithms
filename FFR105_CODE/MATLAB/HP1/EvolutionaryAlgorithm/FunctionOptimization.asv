
%clf;
close all;
clc;

%rng(0);

%hardcoded sets of parameters
nPopulations = [40 80]; %# chromosomes
nTournaments = [2 4 6];
mutationProbabilities = [0.025 0.05 0.075];
crossoverProbabilities = [0.3 0.5 0.7];
tournamentSelectionParameters = [0.2 0.5 0.8];

%hardcoded constant parameters
nCopiesBestIndividual = 2;
variablesRange = 5.0;
nGenerations = 100;
nVariables = 2;%# variables in function
nGenes = 25; %# bits for chromosome

%run settings
doPlot = true;
doPrint = true;
nRuns2Stop = 20;
nAveragingRuns = 2;

currentSettings = double(zeros(1,6));
allSettingsAndResults = double([]);
solutionIndex = 0;

nTournament=0;
nPopulation = 0;
mutationProbability=0.0;
crossoverProbability=0.0;
tournamentSelectionParameter=0.0;

disp("############################ PART I ################################");
disp("... RUN FOR DIFFERENT SETS OF PARAMETERS TO FIND BEST/WORST SOLUTIONS");

iRunsIterator = 0;
for nPopulation=nPopulations
    for crossoverProbability=crossoverProbabilities
        for mutationProbability=mutationProbabilities
            for tournamentSelectionParameter=tournamentSelectionParameters
                for nTournament=nTournaments
                    
                    currentSettings(:) = [nPopulation, crossoverProbability, ...
                        mutationProbability, tournamentSelectionParameter, ...
                        nTournament, 0];
                    
                    xBestMean = double(zeros(nVariables));
                    fxBestMean = 0.;
                    maxFitnessMean = 0.;
                    averageFitnessMean = 0.;
                    seedMean = 0;
                    
                    for i=1:nAveragingRuns-1
                        
                        seed = fix(randi([0,20],1,1));
                        rng(seed);
                        
                        [averageFitness, maxFitness, xBest, fxBest] = GeneticAlgorithm(...
                            nTournament, nCopiesBestIndividual,...
                            nVariables, nPopulation,...
                            nGenes,crossoverProbability,...
                            mutationProbability,tournamentSelectionParameter,...
                            variablesRange,nGenerations,...
                            false, true, solutionIndex);
                      
                        
                        averageFitnessMean = averageFitnessMean + averageFitness;
                        maxFitnessMean = maxFitnessMean + maxFitness;
                        xBestMean = xBestMean + xBest;
                        fxBestMean = fxBestMean + fxBest;
                        seedMean = seedMean + seed;
                        
                        iRunsIterator = iRunsIterator + 1;  
                        
                        if nRuns2Stop == iRunsIterator
                            return
                        end
                        
                    end
                    
                    seed = fix(randi([0,20],1,1));
                    rng(seed);
                    
                    [averageFitness, maxFitness, xBest, fxBest, population] = ...
                        GeneticAlgorithm(...
                        nTournament, nCopiesBestIndividual,...
                        nVariables, nPopulation,...
                        nGenes,crossoverProbability,...
                        mutationProbability,tournamentSelectionParameter,...
                        variablesRange,nGenerations,...
                        false, true, solutionIndex);
                    
                    averageFitnessMean = averageFitnessMean + averageFitness;
                    maxFitnessMean = maxFitnessMean + maxFitness;
                    xBestMean = xBestMean + xBest;
                    fxBestMean = fxBestMean + fxBest;
                    seedMean = seedMean + seed;
                    
                    averageFitnessMean = averageFitnessMean/nAveragingRuns;
                    maxFitnessMean = maxFitnessMean/nAveragingRuns;
                    xBestMean=xBestMean/nAveragingRuns;
                    fxBestMean = fxBestMean/nAveragingRuns;
                    seedMean = fix(seedMean/nAveragingRuns);
                    
                    currentSettings(6) = seedMean;
                    
                    currentResults(:) = [solutionIndex, currentSettings, ...
                        xBestMean(1), xBestMean(2), fxBestMean,...
                        maxFitnessMean, averageFitnessMean];
                    return;
                    
                    allSettingsAndResults = [allSettingsAndResults; currentResults];
                    solutionIndex = solutionIndex + 1;
                    
                end
            end
        end
    end
end


allMinFitness = 1e6;
allMaxFitness = 0;
allMaxAverageFitness = 0;
allMinAverageFitness = 1e6;

allMinFitnessId = 0;
allMaxFitnessId = 0;
allMaxAverageFitnessId = 0;
allMinAverageFitnessId = 0;

nResults = size(allSettingsAndResults);

return;

disp("############################ PART II ################################");
disp("### ### ### ### RERUN BEST/WORST SOLUTIONS AND PLOT (WITH SAVEFIG)");
disp("");

disp('### ### ### ### rerun and plot for allMinFitnessId ### ### ### ###');
disp('... settings:');
allSettingsAndResults(allMinFitnessId,:)
solutionIndex = allSettingsAndResults(allMinFitnessId,1);
nPopulation = allSettingsAndResults(allMinFitnessId,2);
crossoverProbability = allSettingsAndResults(allMinFitnessId,3);
mutationProbability  = allSettingsAndResults(allMinFitnessId,4);
tournamentSelectionParameter = allSettingsAndResults(allMinFitnessId,5);
nTournament = allSettingsAndResults(allMinFitnessId,6);
seed = allSettingsAndResults(allMinFitnessId,7);


GeneticAlgorithm(nTournament, nCopiesBestIndividual,...
    nVariables, nPopulation,...
    nGenes,crossoverProbability,...
    mutationProbability,tournamentSelectionParameter,...
    variablesRange,nGenerations,...
    true, doPrint, solutionIndex,seed);
disp("");
disp('### ### ### ### rerun and plot for allMaxFitnessId ### ### ### ###');
disp('... settings:');
allSettingsAndResults(allMaxFitnessId,:)
solutionIndex = allSettingsAndResults(allMaxFitnessId,1);
nPopulation = allSettingsAndResults(allMaxFitnessId,2);
crossoverProbability = allSettingsAndResults(allMaxFitnessId,3);
mutationProbability  = allSettingsAndResults(allMaxFitnessId,4);
tournamentSelectionParameter = allSettingsAndResults(allMaxFitnessId,5);
nTournament = allSettingsAndResults(allMaxFitnessId,6);
seed = allSettingsAndResults(allMaxFitnessId,7);

GeneticAlgorithm(nTournament, nCopiesBestIndividual,...
    nVariables, nPopulation,...
    nGenes,crossoverProbability,...
    mutationProbability,tournamentSelectionParameter,...
    variablesRange,nGenerations,...
    true, doPrint, solutionIndex,seed);
disp("");
disp('### ### ### ### rerun and plot for allMaxAverageFitnessId ### ### ### ###');
disp('... settings:');
allSettingsAndResults(allMaxAverageFitnessId,:)
solutionIndex = allSettingsAndResults(allMaxAverageFitnessId,1);
nPopulation = allSettingsAndResults(allMaxAverageFitnessId,2);
crossoverProbability = allSettingsAndResults(allMaxAverageFitnessId,3);
mutationProbability  = allSettingsAndResults(allMaxAverageFitnessId,4);
tournamentSelectionParameter = allSettingsAndResults(allMaxAverageFitnessId,5);
nTournament = allSettingsAndResults(allMaxAverageFitnessId,6);
seed = allSettingsAndResults(allMaxAverageFitnessId,7);

GeneticAlgorithm(nTournament, nCopiesBestIndividual,...
    nVariables, nPopulation,...
    nGenes,crossoverProbability,...
    mutationProbability,tournamentSelectionParameter,...
    variablesRange,nGenerations,...
    true, doPrint, solutionIndex, seed);

disp("");
disp('### ### ### ### rerun and plot for allMinAverageFitnessId ### ### ### ###');
disp('... settings:');
allSettingsAndResults(allMinAverageFitnessId,:)
solutionIndex = allSettingsAndResults(allMinAverageFitnessId,1);
nPopulation = allSettingsAndResults(allMinAverageFitnessId,2);
crossoverProbability = allSettingsAndResults(allMinAverageFitnessId,3);
mutationProbability  = allSettingsAndResults(allMinAverageFitnessId,4);
tournamentSelectionParameter = allSettingsAndResults(allMinAverageFitnessId,5);
nTournament = allSettingsAndResults(allMinAverageFitnessId,6);
seed = allSettingsAndResults(allMinAverageFitnessId,7);

GeneticAlgorithm(nTournament, nCopiesBestIndividual,...
    nVariables, nPopulation,...
    nGenes,crossoverProbability,...
    mutationProbability,tournamentSelectionParameter,...
    variablesRange,nGenerations,...
    true, doPrint, solutionIndex,seed);

